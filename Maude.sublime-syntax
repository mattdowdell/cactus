%YAML 1.2
---
# See https://www.sublimetext.com/docs/3/syntax.html
#     https://www.sublimetext.com/docs/3/scope_naming.html
file_extensions:
  - smac
scope: source.smac

variables:
  ident_start: '[A-Za-z_]'
  ident_part: '[A-Za-z0-9_]'
  ident_break: '(?!{{ident_part}})'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comment

  main:
    - include: instruction
    - include: label

  comment:
    # Inline comments begin with a '--' and finish at the end of the line
    - match: '--'
      scope: punctuation.definition.comment.smac
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.smac
        - match: $\n?
          pop: true

    # Block comments begin with a '{-' and finish at the '-}'
    - match: '{-'
      scope: punctuation.definition.comment.begin.smac
      push:
        - meta_scope: comment.block.smac
        - match: '-}'
          scope: punctuation.definition.comment.end.smac
          pop: true

  label:
    - match: '({{ident_start}}{{ident_part}}*)\s*(:)'
      captures:
        1: entity.name.function.smac
        2: punctuation.separator.smac

  instruction:
    - match: '\b(NOP|HALT|POP|DUP|SWAP|MOVRET|PUSHRET|ALLOCA|PUSHARG|DUMPSTACK|DUMPLOC|OUT|OUTLN|IN|STORE|STOREIDX|LOAD|LOADIDX|EQ|NEQ|LEQ|GEQ|LT|GT|COMPL|MINUS|ADD|DIV|REM|MUL|AND|OR|NOT|JMPNZ|JMP|SUBCALL|RETURN)\b'
      captures:
        1: keyword.control.smac
        2: punctuation.terminator.smac
      push: expect-semicolon

    - match: '\b(PUSH)\b'
      scope: keyword.control.smac
      push:
        - expect-semicolon
        - literal

    - match: '&'
      scope: keyword.operator.smac
      push:
        - expect-semicolon
        - address

  literal:
    - match: '\b(ARGS|LOCALS)\b'
      scope: constant.language.smac
      pop: true

    - match: '\b(-?[0-9]+\.[0-9]+)\b'
      scope: constant.numeric.float.smac
      pop: true

    - match: '\b(-?[0-9]+)'
      scope: constant.numeric.integer.smac
      pop: true

    - match: '"'
      scope: punctuation.definition.string.begin.smac
      set: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.smac

    # valid string characters
    - match: '[0-9A-Za-z!#$%&()*+,\-\./:;<=>?@\[\]^_`{|}~ ]+'
    - match: "'"

    # end of string
    - match: '"'
      scope: punctuation.definition.string.end.smac
      pop: true

    # explicitly declare whitespace escape sequences invalid
    - match: '[\n\r\t]'
      scope: invalid.illegal.smac

    # everything else is illegal as well
    - match: '.'
      scope: invalid.illegal.smac

  address:
    - match: '({{ident_start}}{{ident_part}}*){{ident_break}}'
      scope: variable.function.smac
      pop: true

  expect-semicolon:
    - match: ';'
      scope: punctuation.terminator.smac
      pop: true
